ldr r0, =0x20200000    ;) KEEP r0 UNCHANGED

mov r2, #1             ;) setting the output pins 10-19
lsl r2, #12

mov r3, #1             ;) this is the green pin
lsl r3, #15

mov r4, #1
lsl r4, #24

mov r5, #0
add r5, r5, r2
add r5, r5, r3
add r5, r5, r4

str r5, [r0, #4]

mov r2, #1             ;) setting the output pins 20-29
lsl r2, #9

mov r3, #1
lsl r3, #12

mov r4, #1
lsl r4, #15

mov r5, #0
add r5, r5, r2
add r5, r5, r3
add r5, r5, r4

str r5, [r0, #8] 

ldr r6, =0xFFFFFFFC    ;) ~3, could also subract 3 from FFFFFFFF
ldr r7, [r0, #148]     ;) 148 is offset to PULL UP/DOWN ENABLE
and r7, r7, r6         ;) And these contents we put in r7 with the negation of 3
orr r7, r7, #1         ;) Or with 1 (1 is pull down), so last 2 bits go to 01
str r7, [r0, #148]     ;) Put this back in the PULL UP/DOWN ENABLE register

ldr r2, =0x200         ;) Waits while it does (0x200)^2 decrements by 1
wait_1_8:          
cmp r2, #0
blt end_wait_1_8
ldr r3, =0x200
wait_2_8:
cmp r3, #0
blt end_wait_2_8
sub r3, r3, #1
b wait_2_8
end_wait_2_8:
sub r2, r2, #1
b wait_1_8
end_wait_1_8:

mov r1, #1
lsl r1, #17
str r1, [r0, #152]     ;) Set bit 17 in PULL UP/DOWN ENABLE CLOCK 0 to 1

ldr r2, =0x200         ;) Waits while it does (0x500)^2 decrements by 1
wait_1_9:          
cmp r2, #0
blt end_wait_1_9
ldr r3, =0x200
wait_2_9:
cmp r3, #0
blt end_wait_2_9
sub r3, r3, #1
b wait_2_9
end_wait_2_9:
sub r2, r2, #1
b wait_1_9
end_wait_1_9:

ldr r6, =0xFFFFFFFC    ;) ~3, could also subract 3 from FFFFFFFF
ldr r7, [r0, #148]     ;) 148 is offset to PULL UP/DOWN ENABLE
and r7, r7, r6         ;) And these contents we put in r7 with the negation of 3
str r7, [r0, #148]     ;) Resets last 2 bits of PULL UP/DOWN ENABLE register

mov r1, #0
str r1, [r0, #152]     ;) Reset PULL UP/DOWN ENABLE CLOCK 0 to 0

ldr r6, =0xFF1FFFFF    ;) 0xFF1FFFFF = ~(7<<21), mask to preserve all bits except pin 17 bits
ldr r7, [r0, #4]       ;) Control bits for 10 - 19
and r7, r7, r6         ;) Only sets pin 17 control bits to 0 (INPUT)
str r7, [r0, #4]       ;) Store this back in function select registers

clear_score_pins_loop:

ldr r8, =0x1400             ;) r8 always holds loop time length 
mov r12, #0                 ;) score counter

mov r1, #1                  ;) clear scoring pins
lsl r1, #10
str r1, [r0, #40]  

mov r1, #1
lsl r1, #9
str r1, [r0, #40]  

mov r1, #1
lsl r1, #11
str r1, [r0, #40] 

main_loop:
                             ;) could this loop be done under the first set of clearing?
mov r1, #1                   ;) clearing all pins initialy
lsl r1, #14
str r1, [r0, #40]

mov r1, #1
lsl r1, #15
str r1, [r0, #40]  

mov r1, #1
lsl r1, #18
str r1, [r0, #40]  

mov r1, #1
lsl r1, #23
str r1, [r0, #40]  

mov r1, #1
lsl r1, #24
str r1, [r0, #40]  

mov r1, #1         
lsl r1, #25
str r1, [r0, #40]        ;) finished clearing all pins initially

mov r1, #1               ;) turn on pin 14
lsl r1, #14
str r1, [r0, #28] 
mov r15, #14             ;) load first on pin into r15 (currentPin variable) 


ldr r2, [r8]     
wait_1_2:          
cmp r2, #0
blt end_wait_1_2
ldr r3, [r8]
wait_2_2:
ldr r11, [r0, #52]  ;)From here
mov r1, #1
lsl r1, #17
and r11, r11, r1
cmp r11, #0
bne pressed       ;)To here
cmp r3, #0
blt end_wait_2_2
sub r3, r3, #1
b wait_2_2
end_wait_2_2:
sub r2, r2, #1
b wait_1_2
end_wait_1_2:

mov r1, #1            ;) clear pin 14
lsl r1, #14
str r1, [r0, #40] 

mov r1, #1            ;) turn on pin 15
lsl r1, #15
str r1, [r0, #28]  
mov r15, #15           ;) lod 15 into current pin register


ldr r2, [r8]      
wait_1_3:          
cmp r2, #0
blt end_wait_1_3
ldr r3, [r8]
wait_2_3:
ldr r11, [r0, #52]  ;)From here
mov r1, #1
lsl r1, #17
and r11, r11, r1
cmp r11, #0
bne pressed         ;)To here
cmp r3, #0
blt end_wait_2_3
sub r3, r3, #1
b wait_2_3
end_wait_2_3:
sub r2, r2, #1
b wait_1_3
end_wait_1_3:

mov r1, #1            ;) clear pin 15 
lsl r1, #15
str r1, [r0, #40]  

mov r1, #1            ;) turn on pin 18
lsl r1, #18
str r1, [r0, #28] 
mov r15, #18          ;) load 18 into current pin register

ldr r2, [r8]    
wait_1_4: 
cmp r2, #0
blt end_wait_1_4
ldr r3, [r8]
wait_2_4:
ldr r11, [r0, #52]  ;)From here
mov r1, #1
lsl r1, #17
and r11, r11, r1
cmp r11, #0
bne pressed       ;)To here
cmp r3, #0
blt end_wait_2_4
sub r3, r3, #1
b wait_2_4
end_wait_2_4:
sub r2, r2, #1
b wait_1_4
end_wait_1_4:

mov r1, #1            ;) clear pin 18
lsl r1, #18
str r1, [r0, #40] 

mov r1, #1            ;) turn on pin 23 
lsl r1, #23
str r1, [r0, #28] 
mov r15, #23          ;) load 23 into current pin register 

ldr r2, [r8]  
wait_1_5:     
cmp r2, #0
blt end_wait_1_5
ldr r3, [r8]
wait_2_5:
ldr r11, [r0, #52]  ;)From here
mov r1, #1
lsl r1, #17
and r11, r11, r1
cmp r11, #0
bne pressed       ;)To here
cmp r3, #0
blt end_wait_2_5
sub r3, r3, #1
b wait_2_5
end_wait_2_5:
sub r2, r2, #1
b wait_1_5
end_wait_1_5:

mov r1, #1           ;) clear pin 23 
lsl r1, #23
str r1, [r0, #40]

mov r1, #1           ;) turn on pin 24
lsl r1, #24
str r1, [r0, #28]
mov r15, #24         ;) load 24 into current pin register

ldr r2, [r8] 
wait_1_6:    
cmp r2, #0
blt end_wait_1_6
ldr r3, [r8]
wait_2_6:
ldr r11, [r0, #52]  ;)From here
mov r1, #1
lsl r1, #17
and r11, r11, r1
cmp r11, #0
bne pressed       ;)To here
cmp r3, #0
blt end_wait_2_6
sub r3, r3, #1
b wait_2_6
end_wait_2_6:
sub r2, r2, #1
b wait_1_6
end_wait_1_6:

mov r1, #1           ;) clear pin 24
lsl r1, #24
str r1, [r0, #40] 

mov r1, #1           ;) turn on pin 25
lsl r1, #25
str r1, [r0, #28] 
mov r15, #25         ;) load 25 into current pin register 

ldr r2, [r8]      
wait_1_1:          
cmp r2, #0
blt end_wait_1_1
ldr r3, [r8]
wait_2_1:
ldr r11, [r0, #52]  ;)From here
mov r1, #1
lsl r1, #17
and r11, r11, r1
cmp r11, #0
bne pressed       ;)To here
cmp r3, #0
blt end_wait_2_1
sub r3, r3, #1
b wait_2_1
end_wait_2_1:
sub r2, r2, #1
b wait_1_1
end_wait_1_1:

b main_loop

pressed:

ldr r2, =0x2000      ;) wait loop on the last flashing led
wait_1_7:          
cmp r2, #0
blt end_wait_1_7
ldr r3, =0x2000
wait_2_7:
cmp r3, #0
blt end_wait_2_7
sub r3, r3, #1
b wait_2_7
end_wait_2_7:
sub r2, r2, #1
b wait_1_7
end_wait_1_7:

cmp r15, #15        ;) compare current pin when pressed with the green pin
beq scoring         ;) set score pins if green pin
b clear_score_pins_loop   ;) start all over if not green

scoring: 

sub r8, r8, #640    ;) make loop time shorter
add r12, r12, #1    ;) increment score

mov r1, #1          ;) clear scoring pins
lsl r1, #10
str r1, [r0, #40]  

mov r1, #1
lsl r1, #9
str r1, [r0, #40]  

mov r1, #1
lsl r1, #11
str r1, [r0, #40] 

ldr r2, [r12]        ;) setting scoring pins according to score in r12

mov r1, #1
and r1, r2, r1       ;) get first score bit 
b right_score_pin    ;) set right score pin to r1
carryOn_1:
mov r1, #2
and r1, r2, r1       ;) get second score bit 
b middle_score_pin   ;) set middle score pin to r1
carryOn_2:
mov r1, #4
and r1, r2, r1       ;) get third score bit 
b left_score_pin     ;) set left score pin to r1
carryOn_3:

ldr r2, =0x2000      ;) wait to start next level or end game
wait_1_13:          
cmp r2, #0
blt end_wait_1_13
ldr r3, =0x2000
wait_2_13:
cmp r3, #0
blt end_wait_2_13
sub r3, r3, #1
b wait_2_13
end_wait_2_13:
sub r2, r2, #1
b wait_1_13
end_wait_1_13:

cmp r12, #7          ;) see if the game is over
bne main_loop        ;) branch if not equal to main loop

mov r2, #7           ;) counter for while loop
b end_of_game

;)turning on specific score pins 

;) turn on pin 10
right_score_pin:
lsl r1, #10          ;) set pin 10 to score bit
str r1, [r0, #28]
b carryOn_1 

;) turn on pin 9
middle_score_pin:
lsl r1, #9           ;) set pin 9 to score bit 
str r1, [r0, #28] 
b carryOn_2

;) turn on pin 11
left_score_pin:
lsl r1, #11          ;) set pin 11 to score bit 
str r1, [r0, #28] 
b carryOn_3

end_of_game:

ldr r2, =0x2000          ;) wait loop 
wait_1_11:          
cmp r2, #0
blt end_wait_1_11
ldr r3, =0x2000
wait_2_11:
cmp r3, #0
blt end_wait_2_11
sub r3, r3, #1
b wait_2_11
end_wait_2_11:
sub r2, r2, #1
b wait_1_11
end_wait_1_11:

mov r1, #1             ;) clear all led pins
lsl r1, #10
str r1, [r0, #40]  

mov r1, #1
lsl r1, #9
str r1, [r0, #40]  

mov r1, #1
lsl r1, #11
str r1, [r0, #40] 

lsl r1, #14
str r1, [r0, #40]

mov r1, #1
lsl r1, #15
str r1, [r0, #40]  

mov r1, #1
lsl r1, #18
str r1, [r0, #40]  

mov r1, #1
lsl r1, #23
str r1, [r0, #40]  

mov r1, #1
lsl r1, #24
str r1, [r0, #40]  

mov r1, #1         
lsl r1, #25
str r1, [r0, #40]        ;) finished clearing all pins

ldr r2, =0x2000          ;) wait loop 
wait_1_12:          
cmp r2, #0
blt end_wait_1_12
ldr r3, =0x2000
wait_2_12:
cmp r3, #0
blt end_wait_2_12
sub r3, r3, #1
b wait_2_12
end_wait_2_12:
sub r2, r2, #1
b wait_1_12
end_wait_1_12:

mov r1, #1 
lsl r1, #10              ;) tun on all pins
str r1, [r0, #28]

mov r1, #1 
lsl r1, #10          
str r1, [r0, #28]

mov r1, #1 
lsl r1, #10          
str r1, [r0, #28]

mov r1, #1 
lsl r1, #10          
str r1, [r0, #28]

mov r1, #1 
lsl r1, #10          
str r1, [r0, #28]

mov r1, #1 
lsl r1, #10          
str r1, [r0, #28]

mov r1, #1 
lsl r1, #10          
str r1, [r0, #28]

mov r1, #1 
lsl r1, #10          
str r1, [r0, #28]

mov r1, #1 
lsl r1, #10          
str r1, [r0, #28]

mov r1, #1 
lsl r1, #10          
str r1, [r0, #28]

ldr r2, =0x2000      ;) wait loop 
wait_1_10:          
cmp r2, #0
blt end_wait_1_10
ldr r3, =0x2000
wait_2_10:
cmp r3, #0
blt end_wait_2_10
sub r3, r3, #1
b wait_2_10
end_wait_2_10:
sub r2, r2, #1
b wait_1_10
end_wait_1_10:

sub r2, r2, #1       ;) decrement r2 by 1

cmp r2, #0            
blt clear_score_pins_loop
b end_of_ game

